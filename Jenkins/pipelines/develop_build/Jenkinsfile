node {
jdk = tool name: 'Java_8_221'
SONAR_HOME = tool name: 'SonarScanner 4.5'
   env.JAVA_HOME = "${jdk}"
   env.SonarScanner = "${SONAR_HOME}/bin/sonar-scanner"
   def mvnHome
   catchError {
      stage('Preparation') { // for display purposes
         // Get some code from a GitHub repository
         branchName="${BRANCH_NAME}".minus("origin/")
         echo branchName
         git branch: "${branchName}", url: 'https://github.com/skltp/ei.git'

         // Get the Maven tool.
         // ** NOTE: This 'M3' Maven tool must be configured
         // **       in the global configuration.
         mvnHome = tool 'maven:3.8.1-jdk-8'
      }
      stage('Build') {
        // Run the maven build
        configFileProvider([configFile(fileId: "${params.CONFIG_FILE_ID}", variable: 'MAVEN_SETTINGS')]) {
          def maven = docker.image("maven:3.8.1-jdk-8")
	  	  maven.pull()
		  maven.inside("-v ${jdk}:${jdk}") {
		    sh 'mvn --global-settings ${MAVEN_SETTINGS} clean install -Ptest-coverage'
		  }
        }
      }
        stage('SonarScanner'){
            withCredentials([string(credentialsId: "${params.SONAR_TOKENID}", variable: "SONAR_TOKEN" )]) {
                withSonarQubeEnv("${params.SONAR_ENV}") {
                    sh """${SonarScanner} \
                                -Dsonar.projectKey=${params.SONAR_PROJECTKEY} \
                                -Dsonar.login="${SONAR_TOKEN}" \
                                -Dsonar.java.binaries=${params.SONAR_JAVA_BINARIES} \
                                -Dsonar.test.inclusions=**/src/test/**/*.java \
                                -Dsonar.coverage.jacoco.xmlReportPaths=${params.SONAR_JACOCO_REPORTS} \
                                -Dsonar.sourceEncoding=${params.SONAR_SRC_ENCODING}
                        """
                }
            }
        }
   }
   stage('Results') {
      junit '**/target/surefire-reports/TEST-*.xml'
      archiveArtifacts '**/target/*.jar'
   }

   def previousResult = currentBuild.previousBuild?.result
   if(currentBuild.currentResult != 'SUCCESS') {
      //emailext attachLog: true, to: 'skltp@kentor.se', recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "Build failed in Jenkins: ${env.JOB_NAME}#${currentBuild.number}", body: "See ${env.BUILD_URL} for details."
      emailext attachLog: true, recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "Build failed in Jenkins: ${env.JOB_NAME}#${currentBuild.number}", body: "See ${env.BUILD_URL} for details."
   }
   else if (currentBuild.currentResult == 'SUCCESS' && previousResult && previousResult != currentBuild.currentResult) {
      //emailext attachLog: true, to: 'skltp@kentor.se', recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "${env.JOB_NAME} back to stable", body: "See ${env.BUILD_URL} for details."
      emailext attachLog: true, recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "${env.JOB_NAME} back to stable", body: "See ${env.BUILD_URL} for details."
   }
}